'''
This is me creating unit tests for my Python scripts. Hopefully it all makes sense
and it doesn't suck too badly. Let's see if it works quite well.
'''
import unittest
from TestOne.PythonUnitTesting import get_var_value
from TestOne.PythonUnitTesting import connect_to_sauce
from TestOne.PythonUnitTesting import run_sauce_test
#global korgen

class testing(unittest.TestCase):
    def setUp(self):
        print('setup time')
#        test_count = get_var_value() # Increments the number value for the test name
#        driver = connect_to_sauce(test_count) #Connect to Saucelabs
#        print('The driver from connection is: ' + str(driver))
        
    def tearDown(self):
        print('teardown time')    
    
    def test_sauce_python(self):
        test_count = get_var_value() # Increments the number value for the test name
        driver = connect_to_sauce(test_count, 1) #Connect to Saucelabs
        print('driver session is: ' + str(driver.session_id))
        resultant = run_sauce_test(driver); # Run the test and return the result to variable
        print('the resultant is: ' + str(resultant) + '. Character count:'+str(len(resultant)))
        #Check the result and  f the new tab's title is an even amount of characters, pass
        #Otherwise, fail the test
        
        if len(resultant) % 2 == 0:
            driver.execute_script('sauce: job-result=passed')
            print 'the job passed'
        driver.quit() #Done with test. Do I  have to quit the driver here or like... in the fuction?

    #    print 'test passed'
#    else:
#        driver.execute_script('sauce: job-result=failed')
    #    print 'test failed'
#    print'this is after the return'
#    driver.get("https://www.google.com/") #Navigate to Google on new tab
 #   print('the driver title is this cool thing from the zambo: ' + zambo.title())
 #   return zambo
    #time.sleep(15)

        
    
    '''
    def test_sauce_python(self):
        calculator = Calculator()
        result = calculator.add(operanda=2, operandb=3)
        print 'testone'
        self.assertEqual(result, 5, "Addition failed")

    def test_sauce_python2(self):
        calculator = Calculator()
        result = calculator.add(operanda=10, operandb=-5)
        print 'testtwo'
        self.assertEqual(result, 5, "Addition failed")

    def test_sauce_python3(self):
        calculator = Calculator()
        result = calculator.add(operanda=4, operandb=1)
        print 'testthree'
        self.assertEqual(result, 5, "Addition failed")
'''