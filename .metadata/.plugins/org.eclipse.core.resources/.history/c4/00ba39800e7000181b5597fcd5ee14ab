'''
This is me creating unit tests for my Python scripts. Hopefully it all makes sense
and it doesn't suck too badly. Let's see if it works quite well.
'''
import unittest
from TestOne.PythonUnitTesting import get_var_value
from TestOne.PythonUnitTesting import connect_to_sauce
from TestOne.PythonUnitTesting import run_sauce_test
#global korgen

class testing(unittest.TestCase):
    def setUp(self):
        print('setup time')
#        test_count = get_var_value() # Increments the number value for the test name
#        driver = connect_to_sauce(test_count) #Connect to Saucelabs
#        print('The driver from connection is: ' + str(driver))
        
        
    def tearDown(self):
        print('teardown time')    
    
    def test_sauce_python(self):
        print 'The test begins now'
        test_count = get_var_value() # Increments the number value for the test name
        driver = connect_to_sauce(test_count) #Connect to Saucelabs

        print('The connection driver before test is: ' + str(driver))

        #print(run_sauce_test())
        resultant = run_sauce_test(driver);
        print('the resultant is: ' + str(resultant))
    
    '''
    def test_sauce_python(self):
        calculator = Calculator()
        result = calculator.add(operanda=2, operandb=3)
        print 'testone'
        self.assertEqual(result, 5, "Addition failed")

    def test_sauce_python2(self):
        calculator = Calculator()
        result = calculator.add(operanda=10, operandb=-5)
        print 'testtwo'
        self.assertEqual(result, 5, "Addition failed")

    def test_sauce_python3(self):
        calculator = Calculator()
        result = calculator.add(operanda=4, operandb=1)
        print 'testthree'
        self.assertEqual(result, 5, "Addition failed")
'''